10/19 notes about project 3 incl data viz ideas for prezzy



notate that I don't care abt pwds

q - do I care about sentiment? 
	or just wc ?


nb - rowan said she's not running any of this code




*PLOTS TO MAKE! - both within each & across both - 
* length of title (histo)
* length of post (hist) (box?)
* ratio of title-len to post-len
* compare unigrams 
	- list of top 5-10 of each
	- before and after removing stop words)






https://towardsdatascience.com/a-complete-exploratory-data-analysis-and-visualization-for-text-data-29fb1b96fb6a

Univariate visualization includes histogram, bar plots and line charts.
eg
	df['polarity'].iplot(
    kind='hist',
    bins=50,
    xTitle='polarity',
    linecolor='black',
    yTitle='count',
    title='Sentiment Polarity Distribution')



The distribution review text lengths:
	df['review_len'].iplot(
	    kind='hist',
	    bins=100,
	    xTitle='review length',
	    linecolor='black',
	    yTitle='count',
	    title='Review Text Length Distribution')
	df['word_count'].iplot(
	    kind='hist',
	    bins=100,
	    xTitle='word count',
	    linecolor='black',
	    yTitle='count',
	    title='Review Text Word Count Distribution')


(
For categorical features, we simply use bar chart to present the frequency.
	df.groupby('Division Name').count()['Clothing ID'].iplot(kind='bar', yTitle='Count', linecolor='black', 
	opacity=0.8, title='Bar chart of Division Name', xTitle='Division Name')
)













https://medium.com/plotly/nlp-visualisations-for-clear-immediate-insights-into-text-data-and-outputs-9ebfab168d5b


	"N-grams are simply sequences of tokens (words), and have many practical applications as well as being a great exploratory method. As single words can only tell us so much, letâ€™s move straight to plotting counts of top bigrams.
	"

it's a histogram of bigrams 

	fig = px.bar(bigram_df[:20], x='ngram', y='count', \
		title='Counts of top bigrams', 
		template='plotly_white', 
		labels={'ngram': 'Bigram', 'count': 'Count'}
		)
	fig.show()


& there's a treemap, which why ugh
	fig = px.treemap(top_comps_df, title='Treemap chart by companies and whether complaint mentions credit report.',
	                 path=['Company', 'credit_report'], color='Words', color_continuous_scale=px.colors.sequential.GnBu)
	fig.show()




& here's an example just comparing certain bigrams
at 2 companies

For a closer review, we may even compare two companies directly, as done here for top 50 bigrams:
	fig = px.bar(long_bigram_df_tidy, title='Comparision: ' + ngrams_list[0] + ' | ' + ngrams_list[1], x='ngram', y='value'
	             , color='variable', template='plotly_white', color_discrete_sequence=px.colors.qualitative.Bold
	             , labels={'variable': 'Company:', 'ngram': 'N-Gram'})
	fig.update_layout(legend_orientation="h")
	fig.update_layout(legend=dict(x=0.1, y=1.1))
	fig.update_yaxes(title='', showticklabels=False)
	fig.show()
This enables an easy comparison of two datasets by subject matter.
